{"version":3,"sources":["components/TableCell.js","components/TableRow.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["TableCell","props","setColor","setState","color","mouseColor","hasColor","state","console","log","this","onClick","id","Component","TableRow","renderRowContent","thisRow","i","row","length","push","Table","addRow","newRow","Array","numOfCols","fill","table","numOfRows","addCol","newTable","renderTableContents","map","setSelectedColor","event","target","value","className","onChange","App","selectedColor","basename","to","exact","path","component","Home","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eacd280b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './TableCell.css';\n\nclass TableCell extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            color: this.props.color,\n            hasColor: false\n        }\n    }\n\n    setColor = () => {\n        this.setState({\n            //color: \"pink\",\n            color: this.props.mouseColor,\n            hasColor: true\n        });\n    }\n\n    render() {\n        console.log(this.props.color);\n        return (<td onClick={this.setColor} id={this.state.color}></td>)\n    }\n}\n\nexport default TableCell;","import React, { Component } from \"react\";\nimport TableCell from \"./TableCell\";\nimport \"./TableRow.css\";\n\nclass TableRow extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n//Takes in 1 row list of TableRows and must render TableCells from them\n  renderRowContent = () => {\n\n  \t// return this.state.table.map(row => <TableRow row={palooz} />);\n\n  \tlet thisRow = [];\n  \tfor(let i = 0; i < this.props.row.length; i++) {\n  \t\tconsole.log(this.props.row[i]);\n  \t\tthisRow.push(<TableCell mouseColor={this.props.mouseColor} color={this.props.row[i]}/>);\n  \t}\n  \treturn thisRow;\n  };\n\n  render() {\n    return <tr>{this.renderRowContent()}</tr>;\n  }\n}\n\nexport default TableRow;","import React, { Component } from \"react\";\nimport TableRow from \"./TableRow.js\";\nimport \"./TableRow.css\";\nimport TableCell from \"./TableCell.js\";\nimport \"./Table.css\";\n\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //Default Values:\n      numOfRows: 1,\n      numOfCols: 1,\n      table: [],\n      mouseColor: \"gray\"\n    };\n  }\n\n  addRow = () => {\n    let newRow = new Array(this.state.numOfCols).fill(\"gray\");\n    this.setState(\n      {\n        table: [...this.state.table, newRow],\n        numOfRows: this.state.numOfRows + 1\n      }\n      // ,\n      // () => console.log(\"added row\", this.state.numOfRows, this.state.table)\n    );\n  };\n\n  addCol = () => {\n    if(this.state.numOfRows > 1) { //doesn't allow you to add columns when there's no rows\n        let newTable = [...this.state.table];\n        for (let i = 0; i < newTable.length; i++) {\n          newTable[i].push(\"gray\");\n        }\n        this.setState(\n          {\n            table: newTable,\n            numOfCols: this.state.numOfCols + 1\n          }\n        );  \n    }\n    \n  };\n\n  renderTableContents = () => {\n    if (this.state.table.length > 0) {\n      return this.state.table.map(row => <TableRow mouseColor={this.state.mouseColor} row={row} />);\n    } else {\n      return null;\n    }\n  };\n\n  setSelectedColor = (event) => {\n    this.setState({\n        mouseColor: event.target.value\n    });\n  }\n\n  render() {\n    //console.log(this.state.table);\n    return (\n      <div>\n        <div className=\"ButtonContainer\">\n              <button onClick={this.addRow}>Add Row</button>\n              <button onClick={this.addCol}>Add Column</button>\n              <select onChange={this.setSelectedColor}>\n                <option value=\"gray\">Gray</option>\n                <option value=\"pink\">Pink</option>\n                <option value=\"blue\">Blue</option>\n                <option value=\"purple\">Purple</option>\n              </select>\n        </div>{\"\\n\"}\n        <div className=\"container\">\n            <table>\n              <tbody>{this.renderTableContents()}</tbody>\n            </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Table;","import React, { Component } from 'react';\nimport './App.css';\nimport { HashRouter, Route, Link } from \"react-router-dom\";\nimport Table from './components/Table.js'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedColor: \"gray\"\n    };\n  }\n  \n  render() {\n    return (\n      <HashRouter basename='/'>\n        <div className=\"App\">\n          <div className=\"App-Header\">\n            <Link to=\"/\"><h1>React Grid Challenge</h1></Link>\n          </div>\n\n          <Route exact path=\"/\" component={Home} />\n\n          <Table/>\n\n        </div>\n      </HashRouter>\n\n    );\n  }\n}\n\nconst Home = () => <div></div>\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Table from './components/Table.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}